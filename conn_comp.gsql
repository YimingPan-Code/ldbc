CREATE QUERY conn_comp (SET<STRING> v_type, SET<STRING> e_type, INT output_limit = 100,
 BOOL print_accum = TRUE, STRING result_attr = "", STRING file_path = "") {
/*
 This query identifies the Connected Components (undirected edges). When finished, each
 vertex is assigned an INT label = its component ID number.
  v_type: vertex types to traverse          print_accum: print JSON output
  e_type: edge types to traverse            result_attr: INT attr to store results to
  file_path: file to write CSV output to    display_edges: output edges for visualization
  output_limit: max #vertices to output (-1 = all)  
*/

	MinAccum<INT> @cc_id = 0;       //each vertex's tentative component id
	MapAccum<INT, INT> @@compSizes;
	MapAccum<INT, ListAccum<INT>> @@compGroupBySize;
	FILE f(file_path); 

	Start = {v_type};

	# Initialize: Label each vertex with its own internal ID
	S = SELECT x 
		FROM Start:x
		POST-ACCUM x.@cc_id = getvid(x)
	;

	# Propagate smaller internal IDs until no more ID changes can be Done
	WHILE (S.size()>0) DO
			S = SELECT t
				FROM S:s -(e_type:e)- v_type:t
				ACCUM t.@cc_id += s.@cc_id // If s has smaller id than t, copy the id to t
				HAVING t.@cc_id != t.@cc_id'
			;
	END;

	IF file_path != "" THEN
	  f.println("Vertex_ID","Component_ID");
	END;

	Start = {v_type};
	Start = SELECT s FROM Start:s
			POST-ACCUM 
				IF result_attr != "" THEN s.setAttr(result_attr, s.@cc_id) END,
				IF print_accum THEN @@compSizes += (s.@cc_id -> 1) END,
				IF file_path != "" THEN f.println(s, s.@cc_id) END;

	IF print_accum THEN
		IF output_limit >= 0 THEN
			Start = SELECT s FROM Start:s LIMIT output_limit;
		END;
		FOREACH (compId,size) IN @@compSizes DO
			@@compGroupBySize += (size -> compId);
		END;
    PRINT @@compGroupBySize;
	  PRINT @@compSizes as sizes;
	  PRINT Start[Start.@cc_id];
	END;
}
INSTALL QUERY conn_comp
